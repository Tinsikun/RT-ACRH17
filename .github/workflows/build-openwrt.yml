#
# Copyright (c) 2019-2020 P3TERX
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build OpenWrt

on:
  repository_dispatch:  # 支持通过 API 等方式触发
  workflow_dispatch:    # 支持手动触发工作流
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: true
        default: 'true'
  schedule:
    - cron: '30 14 * * 7'  # 每周日 14:30 定时触发构建

env:
  REPO_URL: https://github.com/coolsnowwolf/lede      # OpenWrt 源码仓库地址
  REPO_BRANCH: master                                 # 使用的分支
  FEEDS_CONF: feeds.conf.default                      # 自定义源配置文件
  CONFIG_FILE: .config                                # 自定义配置文件
  DIY_P1_SH: diy-part1.sh                             # 第一部分自定义脚本
  DIY_P2_SH: diy-part2.sh                             # 第二部分自定义脚本
  UPLOAD_BIN_DIR: false                               # 是否上传 bin 目录
  UPLOAD_FIRMWARE: true                               # 是否组织固件文件上传
  UPLOAD_RELEASE: true                                # 是否上传固件到 GitHub Release
  TZ: Asia/Shanghai                                   # 时区设置

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:  # 添加 steps 关键字开始列举工作步骤
      - name: Before freeing up disk space
        run: |
          echo "Before freeing up disk space"
          echo "=============================================================================="
          df -hT                                 # 显示磁盘空间使用情况
          echo "=============================================================================="

      - name: Optimize Disk Space
        uses: hugoalh/disk-space-optimizer-ghaction@v0.8.1
        with:
          operate_sudo: "True"
          general_include: ".+"
          general_exclude: |-
            ^GCC$
            ^G\+\+$
            Clang
            LLVM
          docker_include: ".+"
          docker_prune: "True"
          docker_clean: "True"
          apt_prune: "True"
          apt_clean: "True"
          homebrew_prune: "True"
          homebrew_clean: "True"
          npm_prune: "True"
          npm_clean: "True"
          os_swap: "True"
        # 使用第三方 Action 清理和优化磁盘空间

      - name: Freeing up disk space
        uses: easimon/maximize-build-space@master
        with: 
          root-reserve-mb: 2048
          swap-size-mb: 1
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
        # 最大化可用磁盘空间，移除大文件和不必要的软件

      - name: Free up disk space complete
        run: |
          echo "Free up disk space complete"
          echo "=============================================================================="
          df -hT  # 显示优化后的磁盘空间使用情况
          echo "=============================================================================="

      - name: Checkout
        uses: actions/checkout@v3
        # 检出最新的代码仓库内容到工作区

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install ...  # 安装编译所需的依赖工具和库
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo rm -rf ...                 # 清理不必要的文件和目录
          sudo timedatectl set-timezone "$TZ"  # 设置时区
          sudo chown $USER:$GROUPS $GITHUB_WORKSPACE  
        # 初始化编译环境，安装依赖并进行清理优化

      - name: Clone source code
        working-directory: ./
        run: git clone --depth=1 $REPO_URL -b $REPO_BRANCH openwrt
        # 克隆 OpenWrt 源码到 openwrt 目录

      - name: Load custom feeds
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          chmod +x $DIY_P1_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH
        # 加载自定义软件源配置并运行第一个自定义脚本

      - name: Update feeds
        run: cd openwrt && ./scripts/feeds update -a
        # 更新所有软件包源

      - name: Install feeds
        run: cd openwrt && ./scripts/feeds install -a
        # 安装所有软件包源中的软件包

      - name: Load custom configuration
        run: |
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          chmod +x $DIY_P2_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P2_SH
        # 加载自定义配置文件并运行第二个自定义脚本

      - name: SSH connection to Actions
        uses: P3TERX/ssh2actions@v1.0.0
        if: github.event.inputs.ssh == 'true'
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        # 如果 SSH 输入为 true，则建立 SSH 连接（可选步骤）

      - name: Download package
        id: package
        run: |
          cd openwrt
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;
        # 配置默认选项并下载所需的软件包文件，清理小文件

      - name: Compile the firmware
        id: compile
        run: |
          cd openwrt
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        # 编译固件，记录编译状态、设备名称和时间戳以供后续使用

      - name: Check space usage
        if: (!cancelled())
        run: df -hT
        # 检查编译后磁盘空间使用情况

      - name: Upload bin directory
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/bin
        # 可选：上传 bin 目录（若已开启）

      - name: Organize files
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT
        # 组织固件文件，去除多余目录，并记录固件路径

      - name: Upload firmware directory
        if: steps.organize.outputs.status == 'success' && !cancelled()
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}
        # 可选：上传固件目录作为工件（若已开启）

      - name: Generate release tag
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          touch release.txt
          echo "status=success" >> $GITHUB_OUTPUT
        # 生成用于发布的标签，并创建 release.txt 文件

      - name: Upload firmware to release
        if: steps.tag.outputs.status == 'success' && !cancelled()
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*
        # 将固件文件上传至 GitHub Release

      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 1
          keep_minimum_runs: 3
        # 删除旧的工作流运行记录以节省空间

      - name: Remove old Releases
        uses: dev-drprasad/delete-older-releases@v0.3.4
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # 保留最新的 3 个发行版，删除旧的 GitHub Releases
